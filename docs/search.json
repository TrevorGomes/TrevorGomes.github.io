[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/first-post/index.html",
    "href": "posts/first-post/index.html",
    "title": "Maryland Football",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "How Does Maryland Volleyball Score Points?\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 18, 2025\n\n\nTrevor Gomes\n\n\n\n\n\n\n\n\n\n\n\n\nBig Ten Football Average Plays Season-To-Season\n\n\n\n\n\n\n\n\n\n\n\nOct 15, 2025\n\n\nTrevor Gomes\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland Football\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2025\n\n\nTrevor Gomes\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 9, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nOct 6, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "bigtenfootballplays.html",
    "href": "bigtenfootballplays.html",
    "title": "JOUR479X Class Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nlogs_24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\nRows: 1717 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): Location, Opponent, Result, OT, Bowl.x, TeamURL, Outcome, Bowl.y,...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlogs_25 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs25.csv\")\n\nRows: 711 Columns: 77\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Location, Opponent, Result, OT, TeamURL, Outcome, Team, Conferenc...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nbigtenplays_24 &lt;- logs_24 |&gt; filter(Conference == \"Big Ten Conference\") |&gt; group_by(Team) |&gt; mutate(AveragePlays = mean(TotalPlays)) |&gt;  select(AveragePlays, TotalPlays, Team)\n\nbigtenplays_25 &lt;- logs_25 |&gt; filter(Conference == \"Big Ten Conference\") |&gt; group_by(Team) |&gt; mutate(AveragePlays = mean(TotalPlays)) |&gt;  select(AveragePlays, TotalPlays, Team)\n\n\nggplot() +\n  geom_bar(\n    data = bigtenplays_24,\n    aes(\n      x = reorder(Team, AveragePlays),\n      weight = AveragePlays\n          )) +\n      labs(\n        title = \"2024-25 Big Ten Teams By Number of Offensive Plays\",\n        x = \"School\",\n        y = \"Average Offensive Plays per Game\"\n      ) +\n  theme_light() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nggplot() +\n  geom_bar(\n    data = bigtenplays_25,\n    aes(\n      x = reorder(Team, AveragePlays),\n      weight = AveragePlays\n          )) +\n      labs(\n        title = \"2025-26 Big Ten Teams By Number of Offensive Plays\",\n        x = \"School\",\n        y = \"Average Offensive Plays per Game\"\n      ) +\n  theme_light() +\n  coord_flip()"
  },
  {
    "objectID": "posts/avgcfbplays/index.html",
    "href": "posts/avgcfbplays/index.html",
    "title": "Big Ten Football Average Plays Season-To-Season",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlogs_24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1717 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): Location, Opponent, Result, OT, Bowl.x, TeamURL, Outcome, Bowl.y,...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nlogs_25 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs25.csv\")\n\n\nRows: 711 Columns: 77\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Location, Opponent, Result, OT, TeamURL, Outcome, Team, Conferenc...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nbigtenplays_24 &lt;- logs_24 |&gt; filter(Conference == \"Big Ten Conference\") |&gt; group_by(Team) |&gt; summarise(AveragePlays = mean(TotalPlays))\n\nbigtenplays_25 &lt;- logs_25 |&gt; filter(Conference == \"Big Ten Conference\") |&gt; group_by(Team) |&gt; summarise(AveragePlays = mean(TotalPlays))\n\n\nIn this chunk, I’m filtering the data, which includes all college football games involving FBS teams, to only include games played by teams in the Big Ten. I then group the data by team so that my subsequent mutation, adding the average number of offensive plays the team ran per game, applies to each team individually and not the entire dataset.\nI then selected AveragePlays, TotalPlays, and Team to simplify my dataset and make it only include those three columns.\n\n\nCode\nggplot() +\n  geom_bar(\n    data = bigtenplays_24,\n    aes(\n      x = reorder(Team, AveragePlays),\n      weight = AveragePlays\n          )) +\n      labs(\n        title = \"2024-25 Big Ten Teams By Number of Offensive Plays\",\n        x = \"School\",\n        y = \"Average Offensive Plays per Game\"\n      ) +\n  theme_light() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nThis data reflects time of possession, yards per play (somewhat), and other factors, but it more so displays the tempo each team’s offense plays with. The numbers certainly don’t reflect the quality of a team because Maryland, Rutgers, and USC - the top three teams in average offensive plays per game - played to an 18-20 record in the 2024-25 season.\n\n\nCode\nggplot() +\n  geom_bar(\n    data = bigtenplays_25,\n    aes(\n      x = reorder(Team, AveragePlays),\n      weight = AveragePlays\n          )) +\n      labs(\n        title = \"2025-26 Big Ten Teams By Number of Offensive Plays\",\n        x = \"School\",\n        y = \"Average Offensive Plays per Game\"\n      ) +\n  theme_light() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nThe following season, Rutgers, Maryland, and Nebraska remained in the top five by average offensive plays per game, though there were some significant changes at the bottom and middle of the dataset. Purdue went from last in 2024-25 to third in 2025-26 so far. Indiana went from middle of the pack last season to second so far this season.\nOhio State, interestingly, has remained near the bottom of the conference, despite being the Big Ten’s premier team in both seasons. Illinois and UCLA have also stayed near the bottom in offensive plays per game."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/vballwaffle/index.html",
    "href": "posts/vballwaffle/index.html",
    "title": "How Does Maryland Volleyball Score Points?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\n\n\n\n\nCode\nmatches_2025 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2025.csv\")\n\n\nRows: 4878 Columns: 38\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (33): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis dataset contains thousands of match logs from across the current Division I collegiate volleyball season. Since I’ll only be analyzing Maryland right now, I need to filter the data to only include Maryland’s matches.\n\n\nCode\nmdmatches_2025 &lt;- matches_2025 |&gt; filter(team == \"Maryland\")\n\n\nNow, I need to calculate the total number of kills, blocks, aces, and opponent errors (four methods of scoring points) that Maryland has amassed this season.\n\n\nCode\nmdmatches_2025 |&gt; group_by(team) |&gt; summarise(\n  total_kills = sum(kills),\n  total_blocks = sum(block_solos + block_assists),\n  total_aces = sum(aces),\n  total_opp_errors = sum(defensive_errors)\n)\n\n\n# A tibble: 1 × 5\n  team     total_kills total_blocks total_aces total_opp_errors\n  &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;            &lt;dbl&gt;\n1 Maryland         525          216         72              257\n\n\nTo visualize the proportionality of a statistic - that is, how much a smaller datapoint (such as kills, in this case) accounts for a larger stat (such as points) - waffle charts work well. Here I’ll create one that cleanly and simply displays how Maryland scores its points.\n\n\nCode\nmd &lt;- c(\"Kills\"=525, \"Blocks\"=216, \"Aces\"=72, \"Opponent Errors\"=257)\n\n\n\n\nCode\nwaffle(\n md/2,\n rows = 10,\n title = \"Maryland Volleyball's Points\",\n xlab = \"1 square = 1 point\",\ncolors = c(\"red\", \"black\",\"gold\",\"grey\") \n)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\nℹ The deprecated feature was likely used in the waffle package.\n  Please report the issue to the authors.\n\n\n\n\n\n\n\n\n\nAs is the case for most volleyball teams, a majority of Maryland’s points come from kills or opponent errors. This data in itself isn’t too useful without context, though. To better gauge how the Terps’ scoring stacks up to other teams, we need to analyze another team.\nI’ll choose Nebraska to take a look at the scoring breakdown for one of the nation’s premier programs.\n\n\nCode\nneb_matches_2025 &lt;- matches_2025 |&gt; filter(team == \"Nebraska\")\n\n\n\n\nCode\nneb_matches_2025 |&gt; group_by(team) |&gt; summarise(\n  total_kills = sum(kills),\n  total_blocks = sum(block_solos + block_assists),\n  total_aces = sum(aces),\n  total_opp_errors = sum(defensive_errors)\n)\n\n\n# A tibble: 1 × 5\n  team     total_kills total_blocks total_aces total_opp_errors\n  &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;            &lt;dbl&gt;\n1 Nebraska         777          258         60              325\n\n\n\n\nCode\nneb &lt;- c(\"Kills\"=777, \"Blocks\"=258, \"Aces\"=60, \"Opponent Errors\"=325)\n\n\n\n\nCode\nwaffle(\n neb/3,\n rows = 10,\n title = \"Nebraska Volleyball's Points\",\n xlab = \"1 square = 1 point\",\ncolors = c(\"red\", \"black\",\"grey\",\"tan\") \n)\n\n\n\n\n\n\n\n\n\nSince Nebraska has considerably more points than Maryland, I’ll need to add “padding” to Maryland’s points total to ensure that each waffle chart is displaying data on the same scale. Otherwise, each waffle chart would display different-sized squares.\nSince Nebraska’s points total is 1,420 and Maryland’s is 1,070, I’ll add 350 squares of padding. To do this, I’ll add a set of 350 unnamed squares to the waffle chart.\n\n\nCode\nmd &lt;- c(\"Kills\"=525, \"Blocks\"=216, \"Aces\"=72, \"Opponent Errors\"=257, 350)\n\n\n\n\nCode\niron(\nwaffle(\n md/3,\n rows = 10,\n title = \"Maryland Volleyball's Points\",\n xlab = \"1 square = 1 point\",\ncolors = c(\"red\", \"black\",\"gold\",\"grey\", \"white\") \n),\nwaffle(\n neb/3,\n rows = 10,\n title = \"Nebraska Volleyball's Points\",\n xlab = \"1 square = 1 point\",\ncolors = c(\"red\", \"black\",\"grey\",\"tan\") \n))\n\n\n\n\n\n\n\n\n\nKills, blocks, aces, and opponent errors account for roughly the same share of both teams’ total points. Nebraska seems to accumulate slightly more of its points from kills, and maybe a bit more from opponent errors, compared to Maryland, but aside from that, the proportionality of all four stats is largely the same.\nThe share of these stats may not be the most indicative of how good a team is overall, but rather how proficient the team is in a specific area. If a team had a considerable share of its points from blocks, for example, that would show that they likely have a sturdy defense.\nI would have to create and analyze waffle charts for other teams to determine how Maryland and Nebraska’s share of statistics are typical, or if they both differ from the average. I’d imagine that the most significant variation comes from the number of blocks and aces a team has tallied, because most of a team’s points will naturally come from kills and opponent errors."
  }
]